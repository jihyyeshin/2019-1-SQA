import static org.junit.Assert.*;


import org.junit.Test;

import exceptions.RecipeException;

import org.junit.Before;

import org.junit.Assert;
public class CoffeeMakerTest {

	CoffeeMaker cm= new CoffeeMaker();
	private Recipe r1;

	@Before
	public void setup() throws RecipeException {
		CoffeeMaker cm= new CoffeeMaker();
		r1=new Recipe();
		r1.setName("latte");
		r1.setPrice("4500");
		r1.setAmtCoffee("4");
		r1.setAmtMilk("5");
		r1.setAmtSugar("3");
		r1.setAmtChocolate("2");
		
		//super.setup();
	}
	@Test
	public void testCoffeeMaker() {

	}
	
//	@Test
//	public void testCoffeeMakerFail() {

//
//	}

	@Test
	public void testAddRecipe() {
		Recipe[] rbArray;
		cm.addRecipe(r1);
		rbArray=cm.getRecipes();
		assertEquals("latte", rbArray[0].getName());
		assertEquals(4500, rbArray[0].getPrice());
		assertEquals(4, rbArray[0].getAmtCoffee());
		assertEquals(5, rbArray[0].getAmtMilk());
		assertEquals(4500, rbArray[0].getAmtSugar());
		assertEquals(4500, rbArray[0].getAmtChocolate());		
	}
	
//	@Test
//	public void testAddRecipeFail() {
//		fail("Not yet implemented");
//	}

	@Test
	public void testDeleteRecipe() {
		cm.addRecipe(r1);
		assertEquals("latte", cm.deleteRecipe(0));
	}

//	@Test
//	public void testDeleteRecipeFail() {
//		fail("Not yet implemented");
//	}

	@Test
	public void testEditRecipe() {
		cm.addRecipe(r1);
		cm.editRecipe(0, r3);
		Recipe[] rbArray=cm.getRecipes();
		assertEquals("Latte macciato", rbArray[0].getName());
		assertEquals(4500, rbArray[0].getPrice());
		assertEquals(4, rbArray[0].getAmtCoffee());
		assertEquals(5, rbArray[0].getAmtMilk());
		assertEquals(4500, rbArray[0].getAmtSugar());
		assertEquals(4500, rbArray[0].getAmtChocolate());		
	}
	
//	@Test
//	public void testEditRecipeFail() {
//		fail("Not yet implemented");
//	}

	@Test
	public void testAddInventory() {
		String expected="Coffe: 19\n"+
					"Milk: 22\n"+
					"Sugar: 18\n"+
					"Chocolate: 24\n";
		try {
			
		}catch(InventoryException e) {
			fail("InventoryException should not be thrown")
		}
	}
	
//	@Test
//	public void testAddInventoryFail() {
//		fail("Not yet implemented");
//	}

	@Test
	public void testCheckInventory() {
		Assert.assertEquals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n",cm.checkInventory());
	}
	
//	@Test
//	public void testCheckInventoryFail() {
//		fail("Not yet implemented");
//	}

	@Test
	public void testMakeCoffee() {
		fail("Not yet implemented");
	}
	
//	@Test
//	public void testMakeCoffeeFail() {
//		fail("Not yet implemented");
//	}

	@Test
	public void testGetRecipes() {
		fail("Not yet implemented");
	}

//	@Test
//	public void testGetRecipesFail() {
//		fail("Not yet implemented");
//	}

}
